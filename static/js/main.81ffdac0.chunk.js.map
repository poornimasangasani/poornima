{"version":3,"sources":["components/Home.js","components/Resume.js","components/About.js","AppRoutes.jsx","component.js","App.js","serviceWorker.js","index.js","assets/files/poornimaResume.pdf","assets/images/backgroundImg.jpg"],"names":["Home","className","React","Component","Resume","src","resume","title","style","width","height","About","AppRoutes","path","exact","Header","Layout","Content","Footer","Page","state","visible","showDrawer","setState","onClose","color","backgroundColor","FullscreenOutlined","onClick","to","position","bottom","this","bodyStyle","paddingBottom","display","flexWrap","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0OAaeA,G,6KARX,OACE,yBAAKC,UAAU,YACb,sD,GAJWC,IAAMC,Y,iBCcVC,E,uKAbX,OACE,6BACE,sCACA,4BACEC,IAAKC,IACLC,MAAM,SACNC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,gB,GARpBP,aCWNQ,E,uKATX,OACE,6BACE,2CACA,uC,GALYR,aCqBLS,E,uKAhBX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,mBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,oBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,aAChB,kBAAC,EAAD,Y,GAXcV,a,QCChBY,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OA4EVC,E,4MAzEbC,MAAQ,CACNC,SAAS,G,EAGXC,WAAa,WACX,EAAKC,SAAS,CACZF,SAAS,K,EAGbG,QAAU,WACR,EAAKD,SAAS,CACZF,SAAS,K,uDAGH,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQb,MAAO,CAAEE,OAAQ,UACvB,kBAACK,EAAD,CAAQP,MAAO,CAAEiB,MAAO,QAASC,gBAAiB,YAChD,6BACE,2CAEF,yBAAKzB,UAAU,eACb,kBAAC0B,EAAA,EAAD,CAAoBC,QAAS,kBAAM,EAAKN,iBAE1C,yBAAKrB,UAAU,YACb,kBAAC,IAAD,CAAM4B,GAAG,aAAT,QADF,aAEE,kBAAC,IAAD,CAAMA,GAAG,oBAAT,UAFF,aAGE,kBAAC,IAAD,CAAMA,GAAG,mBAAT,WAGJ,kBAACZ,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACC,EAAD,CACEjB,UAAU,SACVO,MAAO,CACLkB,gBAAiB,UACjBD,MAAO,QACPK,SAAU,QACVC,OAAQ,EACRtB,MAAO,SAPX,oBAcF,kBAAC,IAAD,CACEA,MAAO,IACPe,QAASQ,KAAKR,QACdH,QAASW,KAAKZ,MAAMC,QACpBY,UAAW,CAAEC,cAAe,KAE5B,yBAAK1B,MAAO,CAAE2B,QAAS,OAAQC,SAAU,OAAQ3B,MAAO,SACtD,kBAAC,IAAD,CAAMoB,GAAG,YAAYD,QAASI,KAAKR,SAAnC,QAEQ,IAHV,OAKE,kBAAC,IAAD,CAAMK,GAAG,mBAAmBD,QAASI,KAAKR,SAA1C,UAEQ,IAPV,OASE,kBAAC,IAAD,CAAMK,GAAG,kBAAkBD,QAASI,KAAKR,SAAzC,gB,GAhEOtB,IAAMmC,eCAVC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,4C,kGCA3CD,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.81ffdac0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport image from \"../assets/images/backgroundImg.jpg\";\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bgGround\">\r\n        <h1>Poornima Here ...</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport resume from \"../assets/files/poornimaResume.pdf\";\r\nclass Resume extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Resume</h1>\r\n        <iframe\r\n          src={resume}\r\n          title=\"Resume\"\r\n          style={{ width: \"70%\", height: \"400px\" }}\r\n        ></iframe>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Resume;\r\n","import React, { Component } from \"react\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>About Me...</h1>\r\n        <div>P</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./components/Home\";\r\nimport Resume from \"./components/Resume\";\r\nimport About from \"./components/About\";\r\nclass AppRoutes extends Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/poornima/about\">\r\n          <About />\r\n        </Route>\r\n        <Route path=\"/poornima/resume\">\r\n          <Resume />\r\n        </Route>\r\n        <Route exact path=\"/poornima\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRoutes;\r\n","import React from \"react\";\r\nimport { Layout, Drawer } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport { FullscreenOutlined } from \"@ant-design/icons\";\r\nimport AppRoutes from \"./AppRoutes\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nclass Page extends React.PureComponent {\r\n  state = {\r\n    visible: false,\r\n  };\r\n\r\n  showDrawer = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n  onClose = () => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Layout style={{ height: \"100vh\" }}>\r\n          <Header style={{ color: \"white\", backgroundColor: \"#19191A\" }}>\r\n            <div>\r\n              <span>Poornima</span>\r\n            </div>\r\n            <div className=\"allLinksMob\">\r\n              <FullscreenOutlined onClick={() => this.showDrawer()} />\r\n            </div>\r\n            <div className=\"allLinks\">\r\n              <Link to=\"/poornima\">Home</Link> &nbsp; &nbsp;\r\n              <Link to=\"/poornima/resume\">Resume</Link> &nbsp; &nbsp;\r\n              <Link to=\"/poornima/about\">About</Link>\r\n            </div>\r\n          </Header>\r\n          <Content>\r\n            <AppRoutes />\r\n          </Content>\r\n          <Footer\r\n            className=\"footer\"\r\n            style={{\r\n              backgroundColor: \"#19191a\",\r\n              color: \"white\",\r\n              position: \"fixed\",\r\n              bottom: 0,\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            @ 2020 Poornima\r\n          </Footer>\r\n        </Layout>\r\n\r\n        <Drawer\r\n          width={200}\r\n          onClose={this.onClose}\r\n          visible={this.state.visible}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n        >\r\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", width: \"40px\" }}>\r\n            <Link to=\"/poornima\" onClick={this.onClose}>\r\n              Home\r\n            </Link>{\" \"}\r\n            &nbsp;\r\n            <Link to=\"/poornima/resume\" onClick={this.onClose}>\r\n              Resume\r\n            </Link>{\" \"}\r\n            &nbsp;\r\n            <Link to=\"/poornima/about\" onClick={this.onClose}>\r\n              About\r\n            </Link>\r\n          </div>\r\n        </Drawer>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page;\r\n","import React from \"react\";\nimport \"./assets/css/App.css\";\nimport Page from \"./component\";\n\nfunction App() {\n  return <Page />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/poornimaResume.3a2653f8.pdf\";","module.exports = __webpack_public_path__ + \"static/media/backgroundImg.07c3c4f3.jpg\";"],"sourceRoot":""}